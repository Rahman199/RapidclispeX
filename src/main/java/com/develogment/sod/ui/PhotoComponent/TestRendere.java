
package com.develogment.sod.ui.PhotoComponent;

import com.develogment.sod.domain.Payment;
import com.develogment.sod.ui.PaymentGrid;
import com.flowingcode.vaadin.addons.ironicons.IronIcons;
import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.UIUtils;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.VaadinServletService;


@Route("TestRen")
public class TestRendere extends VerticalLayout implements RenderedComponent<Payment>
{
	private Payment payment;

	public TestRendere()
	{
		super();
		this.initUI();
		
	}

	@Override
	public void renderComponent(final Payment value)
	{
		
		this.payment = value;

		VaadinServletService.getCurrentServletRequest().getSession().setAttribute("value", value);
		// TODO Auto-generated method stub

	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		
		new CustomerDetailsView()
			.setPayment(this.payment)
			.setSavedCallback(() -> {
				final PaymentGrid nextParent = UIUtils.getNextParent(this, PaymentGrid.class);
				nextParent.refresh();
			})
			.open();
	}
	
	// <generated-code name="variables">
	private Button button;
	// </generated-code>
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.button = new Button();

		this.button.addThemeVariants(ButtonVariant.LUMO_SMALL, ButtonVariant.LUMO_TERTIARY);
		this.button.setIcon(IronIcons.SETTINGS.create());

		this.button.setSizeUndefined();
		this.add(this.button);
		this.setHorizontalComponentAlignment(FlexComponent.Alignment.END, this.button);
		this.setSizeFull();

		this.button.addClickListener(this::button_onClick);
	} // </generated-code>

}
