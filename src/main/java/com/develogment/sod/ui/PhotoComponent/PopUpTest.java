
package com.develogment.sod.ui.PhotoComponent;

import java.lang.reflect.Field;

import com.develogment.sod.dal.AddressDAO;
import com.develogment.sod.dal.CustomerDAO;
import com.develogment.sod.dal.StoreDAO;
import com.develogment.sod.domain.Address;
import com.develogment.sod.domain.Customer;
import com.develogment.sod.domain.Payment;
import com.develogment.sod.domain.Store;
import com.rapidclipse.framework.server.data.converter.ConverterBuilder;
import com.rapidclipse.framework.server.resources.CaptionUtils;
import com.rapidclipse.framework.server.ui.ItemLabelGeneratorFactory;
import com.rapidclipse.framework.server.ui.StartsWithIgnoreCaseItemFilter;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.datepicker.DatePicker;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.formlayout.FormLayout.FormItem;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.tabs.Tab;
import com.vaadin.flow.component.tabs.Tabs;
import com.vaadin.flow.component.tabs.Tabs.SelectedChangeEvent;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.provider.DataProvider;
import com.vaadin.flow.router.Route;


@Route("Test")

public class PopUpTest extends Dialog
{

	private Payment  payment;
	private Runnable listener;
	private Customer customer;
	
	/**
	 * Find Items From One List Based On Values From Another List
	 */
	public PopUpTest()
	{

		super();
		this.initUI();

		// VaadinServletService.getCurrentServletRequest().getSession().getAttribute("value");

		// UI.getCurrent().getSession().getAttribute(Payment.class);
		
	}

	public PopUpTest setPayment(final Payment payment)
	{

		this.payment = payment;

		this.binder.setBean(payment.getCustomer());
		
		return this;
		
	}
	
	public PopUpTest setSavedCallback(final Runnable listener)
	{
		
		this.listener = listener;
		return this;
		
	}
	
	public PopUpTest setCustomer()
	{
		final Field[] fields = CustomerDAO.class.getFields();
		
		for(int i = 0; i < fields.length; i++)
		{
			
			if(this.payment
				.equals(fields))
			{

				this.form.setVisible(false);
			}
			
		}
		return this;
	}
	
	private void tabs_onSelectedChange(final SelectedChangeEvent event)
	{
		
		final String selection = event.getSelectedTab().getLabel();
		
		if(selection.contentEquals("Image"))
		
		{

			this.verticalLayout.setVisible(true);
			this.form.setVisible(true);

		}
		
		else if(selection.contentEquals("Customer Info"))
		
		{
			
			this.form.setVisible(false);
			
		}
		
		else if(selection.contentEquals("Drei"))
		
		{
			
		}
		
	}

	// <generated-code name="variables">
	private Tab               tab, tab2, tab3;
	private NumberField       nrCustomerId;
	private VerticalLayout    verticalLayout;
	private Label             lblActive, lblAddress, lblCreateDate, lblCustomerId, lblEmail, lblFirstName, lblLastName,
		lblLastUpdate, lblStore;
	private Tabs              tabs;
	private ComboBox<Address> cmbAddress;
	private ComboBox<Store>   cmbStore;
	private Binder<Customer>  binder;
	private FormItem          formItem, formItem2, formItem3, formItem4, formItem5, formItem6, formItem7, formItem8,
		formItem9;
	private FormLayout        form;
	private Checkbox          chkActive;
	private DatePicker        dateCreateDate, dateLastUpdate;
	private TextField         txtEmail, txtFirstName, txtLastName;
	// </generated-code>
	
	/**
	 * Event handler delegate method for the {@link Tabs} {@link #tabs}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.verticalLayout = new VerticalLayout();
		this.tabs           = new Tabs();
		this.tab            = new Tab();
		this.tab2           = new Tab();
		this.tab3           = new Tab();
		this.form           = new FormLayout();
		this.formItem       = new FormItem();
		this.lblActive      = new Label();
		this.chkActive      = new Checkbox();
		this.formItem2      = new FormItem();
		this.lblAddress     = new Label();
		this.cmbAddress     = new ComboBox<>();
		this.formItem3      = new FormItem();
		this.lblCreateDate  = new Label();
		this.dateCreateDate = new DatePicker();
		this.formItem4      = new FormItem();
		this.lblCustomerId  = new Label();
		this.nrCustomerId   = new NumberField();
		this.formItem5      = new FormItem();
		this.lblEmail       = new Label();
		this.txtEmail       = new TextField();
		this.formItem6      = new FormItem();
		this.lblFirstName   = new Label();
		this.txtFirstName   = new TextField();
		this.formItem7      = new FormItem();
		this.lblLastName    = new Label();
		this.txtLastName    = new TextField();
		this.formItem8      = new FormItem();
		this.lblLastUpdate  = new Label();
		this.dateLastUpdate = new DatePicker();
		this.formItem9      = new FormItem();
		this.lblStore       = new Label();
		this.cmbStore       = new ComboBox<>();
		this.binder         = new Binder<>();

		this.tab.setLabel("Image");
		this.tab2.setLabel("Customer Info");
		this.tab3.setLabel("Tab");
		this.form.setResponsiveSteps(
			new FormLayout.ResponsiveStep("0px", 1, FormLayout.ResponsiveStep.LabelsPosition.ASIDE),
			new FormLayout.ResponsiveStep("500px", 2));
		this.lblActive.setText("Active");
		this.chkActive.setTabIndex(1);
		this.chkActive.setLabel("Checkbox");
		this.lblAddress.setText("Address");
		this.cmbAddress.setTabIndex(2);
		this.cmbAddress.setDataProvider(StartsWithIgnoreCaseItemFilter.New(this.cmbAddress::getItemLabelGenerator),
			DataProvider.ofCollection(AddressDAO.INSTANCE.findAll()));
		this.cmbAddress.setItemLabelGenerator(ItemLabelGeneratorFactory.NonNull(CaptionUtils::resolveCaption));
		this.lblCreateDate.setText("CreateDate");
		this.dateCreateDate.setTabIndex(3);
		this.lblCustomerId.setText("CustomerId");
		this.nrCustomerId.setTabIndex(4);
		this.lblEmail.setText("Email");
		this.txtEmail.setTabIndex(5);
		this.lblFirstName.setText("FirstName");
		this.txtFirstName.setTabIndex(6);
		this.lblLastName.setText("LastName");
		this.txtLastName.setTabIndex(7);
		this.lblLastUpdate.setText("LastUpdate");
		this.dateLastUpdate.setTabIndex(8);
		this.lblStore.setText("Store");
		this.cmbStore.setTabIndex(9);
		this.cmbStore.setDataProvider(StartsWithIgnoreCaseItemFilter.New(this.cmbStore::getItemLabelGenerator),
			DataProvider.ofCollection(StoreDAO.INSTANCE.findAll()));
		this.cmbStore.setItemLabelGenerator(ItemLabelGeneratorFactory.NonNull(CaptionUtils::resolveCaption));

		this.binder.forField(this.chkActive).withNullRepresentation(false).bind(Customer::isActive,
			Customer::setActive);
		this.binder.forField(this.cmbAddress).bind(Customer::getAddress, Customer::setAddress);
		this.binder.forField(this.dateCreateDate)
			.withConverter(ConverterBuilder.LocalDateToUtilDate().systemDefaultZoneId().build())
			.bind(Customer::getCreateDate, Customer::setCreateDate);
		this.binder.forField(this.nrCustomerId).withConverter(ConverterBuilder.DoubleToShort().build())
			.bind(Customer::getCustomerId, Customer::setCustomerId);
		this.binder.forField(this.txtEmail).withNullRepresentation("").bind(Customer::getEmail, Customer::setEmail);
		this.binder.forField(this.txtFirstName).withNullRepresentation("").bind(Customer::getFirstName,
			Customer::setFirstName);
		this.binder.forField(this.txtLastName).withNullRepresentation("").bind(Customer::getLastName,
			Customer::setLastName);
		this.binder.forField(this.dateLastUpdate)
			.withConverter(ConverterBuilder.LocalDateToUtilDate().systemDefaultZoneId().build())
			.bind(Customer::getLastUpdate, Customer::setLastUpdate);
		this.binder.forField(this.cmbStore).bind(Customer::getStore, Customer::setStore);

		this.tabs.add(this.tab, this.tab2, this.tab3);
		this.lblActive.setSizeUndefined();
		this.lblActive.getElement().setAttribute("slot", "label");
		this.chkActive.setWidthFull();
		this.chkActive.setHeight(null);
		this.formItem.add(this.lblActive, this.chkActive);
		this.lblAddress.setSizeUndefined();
		this.lblAddress.getElement().setAttribute("slot", "label");
		this.cmbAddress.setWidthFull();
		this.cmbAddress.setHeight(null);
		this.formItem2.add(this.lblAddress, this.cmbAddress);
		this.lblCreateDate.setSizeUndefined();
		this.lblCreateDate.getElement().setAttribute("slot", "label");
		this.dateCreateDate.setWidthFull();
		this.dateCreateDate.setHeight(null);
		this.formItem3.add(this.lblCreateDate, this.dateCreateDate);
		this.lblCustomerId.setSizeUndefined();
		this.lblCustomerId.getElement().setAttribute("slot", "label");
		this.nrCustomerId.setWidthFull();
		this.nrCustomerId.setHeight(null);
		this.formItem4.add(this.lblCustomerId, this.nrCustomerId);
		this.lblEmail.setSizeUndefined();
		this.lblEmail.getElement().setAttribute("slot", "label");
		this.txtEmail.setWidthFull();
		this.txtEmail.setHeight(null);
		this.formItem5.add(this.lblEmail, this.txtEmail);
		this.lblFirstName.setSizeUndefined();
		this.lblFirstName.getElement().setAttribute("slot", "label");
		this.txtFirstName.setWidthFull();
		this.txtFirstName.setHeight(null);
		this.formItem6.add(this.lblFirstName, this.txtFirstName);
		this.lblLastName.setSizeUndefined();
		this.lblLastName.getElement().setAttribute("slot", "label");
		this.txtLastName.setWidthFull();
		this.txtLastName.setHeight(null);
		this.formItem7.add(this.lblLastName, this.txtLastName);
		this.lblLastUpdate.setSizeUndefined();
		this.lblLastUpdate.getElement().setAttribute("slot", "label");
		this.dateLastUpdate.setWidthFull();
		this.dateLastUpdate.setHeight(null);
		this.formItem8.add(this.lblLastUpdate, this.dateLastUpdate);
		this.lblStore.setSizeUndefined();
		this.lblStore.getElement().setAttribute("slot", "label");
		this.cmbStore.setWidthFull();
		this.cmbStore.setHeight(null);
		this.formItem9.add(this.lblStore, this.cmbStore);
		this.form.add(this.formItem, this.formItem2, this.formItem3, this.formItem4, this.formItem5, this.formItem6,
			this.formItem7, this.formItem8, this.formItem9);
		this.tabs.setWidthFull();
		this.tabs.setHeight(null);
		this.form.setSizeUndefined();
		this.verticalLayout.add(this.tabs, this.form);
		this.verticalLayout.setWidthFull();
		this.verticalLayout.setHeight(null);
		this.add(this.verticalLayout);
		this.setWidth("800px");
		this.setHeight("500px");

		this.tabs.setSelectedIndex(-1);

		this.tabs.addSelectedChangeListener(this::tabs_onSelectedChange);
	} // </generated-code>
	
}
