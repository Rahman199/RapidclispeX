
package com.develogment.sod.ui.first;

import com.develogment.sod.ui.MainContainer;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.HasElement;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.ParentLayout;
import com.vaadin.flow.router.RoutePrefix;
import com.vaadin.flow.router.RouterLayout;


@ParentLayout(MainContainer.class)
@RoutePrefix("category1")
@HtmlImport("frontend://styles/shared-styles.html")
public class Cat1MainContainer extends HorizontalLayout implements RouterLayout
{
	public Cat1MainContainer()
	{
		super();
		this.initUI();
	}
	
	@Override
	public void showRouterLayoutContent(final HasElement content)
	{
		RouterLayout.super.showRouterLayoutContent(content);
		this.getElement().appendChild(content.getElement());
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnView1}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnView1_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(Cat1ViewFirst.class);
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnView2}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnView2_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(Cat1ViewSecond.class);
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnView3}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnView3_onClick(final ClickEvent<Button> event)
	{
		UI.getCurrent().navigate(Cat1ViewThird.class);
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.navMenu  = new VerticalLayout();
		this.btnView1 = new Button();
		this.btnView2 = new Button();
		this.btnView3 = new Button();
		
		this.setClassName("my-category");
		this.setMinHeight("0");
		this.setSpacing(false);
		this.setDefaultVerticalComponentAlignment(FlexComponent.Alignment.STRETCH);
		this.navMenu.setClassName("my-menu");
		this.navMenu.setMinHeight("0");
		this.navMenu.setSpacing(false);
		this.navMenu.setMaxWidth("300px");
		this.navMenu.setPadding(false);
		this.navMenu.setMinWidth("300px");
		this.navMenu.setDefaultHorizontalComponentAlignment(FlexComponent.Alignment.STRETCH);
		this.navMenu.getStyle().set("overflow-x", "hidden");
		this.navMenu.getStyle().set("overflow-y", "auto");
		this.btnView1.setClassName("my-navbutton");
		this.btnView1.setText("documentation");
		this.btnView2.setClassName("my-navbutton");
		this.btnView2.setText("tutorials");
		this.btnView3.setClassName("my-navbutton");
		this.btnView3.setText("examples");
		
		this.btnView1.setSizeUndefined();
		this.btnView2.setSizeUndefined();
		this.btnView3.setSizeUndefined();
		this.navMenu.add(this.btnView1, this.btnView2, this.btnView3);
		this.navMenu.setSizeUndefined();
		this.add(this.navMenu);
		this.setSizeUndefined();
		
		this.btnView1.addClickListener(this::btnView1_onClick);
		this.btnView2.addClickListener(this::btnView2_onClick);
		this.btnView3.addClickListener(this::btnView3_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button         btnView1, btnView2, btnView3;
	private VerticalLayout navMenu;
	// </generated-code>
	
}
