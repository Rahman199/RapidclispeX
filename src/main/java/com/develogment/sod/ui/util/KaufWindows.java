
package com.develogment.sod.ui.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

import com.develogment.sod.dal.ProductDAO;
import com.develogment.sod.domain.Product;
import com.develogment.sod.ui.second.Cat2MainContainer;
import com.rapidclipse.framework.server.ui.HtmlObject;
import com.vaadin.flow.component.dependency.HtmlImport;
import com.vaadin.flow.component.dependency.JsModule;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.IFrame;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.InputStreamFactory;
import com.vaadin.flow.server.StreamResource;


@HtmlImport("frontend://styles/pdf.html")
@JsModule("frontend://styles/myscript.js")
@Route(value = "Kaufen", layout = Cat2MainContainer.class)

public class KaufWindows extends VerticalLayout
{
	Product          product;
	File             file;
	FileOutputStream fos = null;

	/**
	 *
	 */
	public KaufWindows()
	{
		super();
		this.initUI();
		this.CustomerMessagesView();
		
	}
	
	private void CustomerMessagesView()
	{
		
		ProductDAO.INSTANCE.findAll().forEach(p -> {
			if(p.getImage() != null && p.getProductName() != null)
			{
				
				final Image imageByte = this.convertImage(p.getImage());
				imageByte.setWidth("200px");
				imageByte.setHeight("200px");
				imageByte.addClickListener(e -> {

					final byte[]         description = p.getDescription();
					final VerticalLayout layout      = new VerticalLayout();

					final StreamResource streamResource = new StreamResource(
						"report.pdf", () -> this.getClass().getResourceAsStream("/report1.jrxml")); // file in
																									// src/main/resources/

					final StreamResource   resource =
						new StreamResource("report.pdf",
							() -> this.getClass().getResourceAsStream("META-INF://report.pdf"));
					final PdfBrowserViewer viewer   = new PdfBrowserViewer(streamResource);
					viewer.setHeight("100%");
					final IFrame iframe = new IFrame("META-INF://report.pdf");
					iframe.setHeight("70%");
					
					final Dialog window = new Dialog();
					
					window.setWidth("80%");
					
					window.setHeight("80%");
					window.add(new Label(p.getProductName()));
					window.add(viewer, layout);
					window.open();
					final HtmlObject htmlPreview = new HtmlObject(resource, "application/pdf");
					htmlPreview.setSizeFull();
					window.add(htmlPreview);
					window.setModal(true);
					// VaadinSession.getCurrent().getBrowser().getBrowserApplication();
					
					/*
					 * UI.getCurrent().getPage().addJavaScript("frontend://styles/myscript.js");
					 * UI.getCurrent().getPage().addHtmlImport("frontend://pdf/browser.html");
					 * pdfViewer.setSizeFull();
					 * window.add(iframe);
					 */
					
				});
				
				this.imagelayout.add(imageByte);
				this.labelDiv.add(p.getProductName());
				this.imagelayout.setVisible(true);
				
			}
			
		});
		
	}

	private void ReadPdf(final File f) throws Exception
	{

		final PDDocument          document      = PDDocument.load(f);
		final PDPage              page          = document.getPage(0);
		final PDPageContentStream contentStream =
			new PDPageContentStream(document, page, PDPageContentStream.AppendMode.APPEND, true, true);
		contentStream.beginText();
		
		// Setting the font
		contentStream.setFont(PDType1Font.TIMES_ROMAN, 12);
		
		// Setting the text position
		contentStream.newLineAtOffset(25, 500);
		
		final String text = "This message is writtern to the pdf file.";
		contentStream.showText(text);
		contentStream.endText();
		contentStream.close();
		// Saving file after writing
		document.save(new File("test.pdf"));
		document.close();

	}
	
	private Image convertImage(final byte[] imageBytes)
	{

		final StreamResource streamResource = new StreamResource("", new InputStreamFactory()
		{
			@Override
			public InputStream createInputStream()
			{
				if(imageBytes != null)
				{
					return new ByteArrayInputStream(imageBytes);
				}
				else
				{
					return null;
				}
			}
			
		});
		
		return new Image(streamResource, " ");
	}

	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.horizontalLayout = new HorizontalLayout();
		this.verticalLayout   = new VerticalLayout();
		this.label            = new Label();
		this.imagelayout      = new Div();
		this.labelDiv         = new Div();
		
		this.getStyle().set("overflow-x", "hidden");
		this.getStyle().set("overflow-y", "auto");
		this.label.setText("Get more  details by clicking on the  picture");
		
		this.label.setSizeUndefined();
		this.imagelayout.setWidthFull();
		this.imagelayout.setHeight(null);
		this.labelDiv.setWidthFull();
		this.labelDiv.setHeight(null);
		this.verticalLayout.add(this.label, this.imagelayout, this.labelDiv);
		this.verticalLayout.setHorizontalComponentAlignment(FlexComponent.Alignment.STRETCH, this.label);
		this.verticalLayout.setFlexGrow(1.0, this.label);
		this.verticalLayout.setHorizontalComponentAlignment(FlexComponent.Alignment.STRETCH, this.imagelayout);
		this.verticalLayout.setHorizontalComponentAlignment(FlexComponent.Alignment.STRETCH, this.labelDiv);
		this.horizontalLayout.setWidth("100px");
		this.horizontalLayout.setHeight("100px");
		this.verticalLayout.setWidthFull();
		this.verticalLayout.setHeight(null);
		this.add(this.horizontalLayout, this.verticalLayout);
		this.setSizeFull();
	} // </generated-code>

	// <generated-code name="variables">
	private HorizontalLayout horizontalLayout;
	private VerticalLayout   verticalLayout;
	private Label            label;
	private Div              imagelayout, labelDiv;
	// </generated-code>
	
}
